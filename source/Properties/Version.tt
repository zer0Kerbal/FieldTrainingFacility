<#
/*
   * Version.tt
   * 2.0.4.0
*/

/* Field Training Facility (FTF)
 * Kerbals gain experience (stars) using time and electric charge. For Kerbal Space Program.
 * Copyright (C) 2016 EFour
 * Copyright (C) 2019, 2022, 2023 zer0Kerbal (zer0Kerbal at hotmail dot com)
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#>
<# // from https://docs.microsoft.com/en-us/visualstudio/modeling/walkthrough-generating-code-by-using-text-templates?view=vs-2017 #>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#
	//
	// Update the following with mod name as listed on the .version file
	//
	string PROJECT_NAME = "FieldTrainingFacility";
	int major = 0;
	int minor = 0;
	int patch = 0;
	int build = 0;
	int revisionNumber;
	try
	{
		//If we cannot find the file, the revision number is set to zero,
		//so even if the file doesn't exists the generation will run anyway.
		//NOTE: we suppose we're not messing with the generated file
		
		using(var f = File.OpenText(Host.ResolvePath("Version.cs")))
		{
			//We're reading the previous revision number; in order to make the
			//code as simple as we can, we're just going to rewrite it on the first row, commented.
			//This is not elegant, but it's simple enough and quite effective.
			string _st = f.ReadLine().Replace("//","");
			revisionNumber = int.Parse(_st) + 1; 
		}
	}catch{ revisionNumber = 0;	}
	
	try
	{
		string file = this.Host.ResolvePath("../../" + PROJECT_NAME + ".version");
		string text = File.ReadAllText(file);

		{
			int i = text.IndexOf("\"VERSION\"", System.StringComparison.Ordinal);
			int j = text.IndexOf("}", i + 1, System.StringComparison.Ordinal);
			text = text.Substring(i, j-i+1);
		}

		try
		{
			int i = text.IndexOf("\"MAJOR\"", System.StringComparison.Ordinal);
			while (!Char.IsNumber(text[i])) ++i;
			int j = i;
			while (Char.IsNumber(text[j])) ++j;
			Int32.TryParse(text.Substring(i,j-i), out major);
		}
		catch { }

		try
		{
			int i = text.IndexOf("\"MINOR\"", System.StringComparison.Ordinal);
			while (!Char.IsNumber(text[i])) ++i;
			int j = i;
			while (Char.IsNumber(text[j])) ++j;
			Int32.TryParse(text.Substring(i,j-i), out minor);
		}
		catch { }

		try
		{
			int i = text.IndexOf("\"PATCH\"", System.StringComparison.Ordinal);
			while (!Char.IsNumber(text[i])) ++i;
			int j = i;
			while (Char.IsNumber(text[j])) ++j;
			Int32.TryParse(text.Substring(i,j-i), out patch);
		}
		catch { }

		try
		{
			int i = text.IndexOf("\"BUILD\"", System.StringComparison.Ordinal);
			while (!Char.IsNumber(text[i])) ++i;
			int j = i;
			while (Char.IsNumber(text[j])) ++j;
			Int32.TryParse(text.Substring(i,j-i), out build);
		}
		catch { }
	}
	catch (Exception e)
	{
		Write("Error: " + e.Message);
	}
#>
//<#=revisionNumber#>
// 
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// 

using System.Reflection;

[assembly: AssemblyFileVersion("<#= major #>.<#= minor #>.<#= patch #>.<#= revisionNumber #>")]
[assembly: AssemblyVersion("<#= major #>.<#= minor #>.<#= patch #>.<#= build #>")]
[assembly: AssemblyInformationalVersion("<#= major #>.<#= minor #>.<#= patch #>")]
[assembly: KSPAssembly("<#= PROJECT_NAME #>", <#= major #>,<#= minor #>,<#= patch #>)]

namespace <#= PROJECT_NAME #>
{
	/// <summary>Version - retrieved at compile from <#= PROJECT_NAME #>.version</summary>
	public static class Version
	{
		/// <summary>Major revision</summary>
		public const int major = <#= major #>;
		/// <summary>Minor revision</summary>
		public const int minor = <#= minor #>;
		/// <summary>Patch revision</summary>
		public const int patch = <#= patch #>;
		/// <summary>Build revision</summary>
		public const int build = <#= build #>;
		/// <summary>Version String const</summary>
		public const string Number = "<#= major #>.<#= minor #>.<#= patch #>.<#= build #>";
#if DEBUG
		/// <summary>Debug Version String const</summary>
        public const string Text = Number + "-zed'K BETA DEBUG";
		/// <summary>Debug SVersion String const</summary>
        public const string SText = Number + "-zed'K BETA DEBUG";
#else
		/// <summary>Text Version String const</summary>
        public const string Text = Number + "-zed'K";
		/// <summary>Plain Text Version String const</summary>
		public const string SText = Number;
#endif
	}
}